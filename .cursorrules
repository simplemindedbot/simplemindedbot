# Cursor Rules for Simpleminded.bot

This repository contains a blog website built using the Zola static site generator.
The repository follows a standard static site structure while incorporating modern web features and security measures.
Here's how to interpret the structure:

1. Content Organization:
   - All content is written in Markdown format
   - Content files are stored in the `content` directory
   - Pages like "contact", "about", and "privacy" are stored in `content/pages/`
   - Blog posts are likely stored in `content/blog/` or similar

2. Theme Structure:
   - Uses a customized version of the "Abridge" theme
   - Theme configuration is managed through `config.toml`
   - Custom styling is applied via `custom.css`

3. Configuration Details:
   - Site metadata and SEO settings are defined in `config.toml`
   - Navigation menus are configured for both header and footer
   - Supports features like series posts, PWA functionality, and social media integration
   - Uses Netlify for form handling and serverless functions

4. Special Features:
   - Implements dark/light mode switching
   - Includes content filtering (via Netlify Functions)
   - Supports responsive images
   - Has built-in SEO optimization
   - Implements PWA (Progressive Web App) capabilities

5. Interactive Elements:
   - Contact form with reCAPTCHA and honeypot protection
   - Forms are handled by Netlify
   - JavaScript-enhanced functionality
   - Code block copy buttons
   - Email obfuscation for privacy

6. Code Modification Guidelines:
   - When modifying existing code or content, use commenting rather than deletion
   - Use standard comment syntax appropriate for the file type:
     - HTML/XML: <!-- commented content -->
     - JavaScript: // for single line, /* */ for multi-line
     - CSS: /* commented content */
     - TOML: # for single line comments
     - Markdown: <!-- commented content -->
   - Keep original code as reference by commenting it out
   - Place new code immediately after commented section
   - Include brief explanation of changes in comments
   - Example:
     ```javascript
     // Original code commented for reference
     // function oldFunction() {
     //     return oldValue;
     // }
     
     // Updated for better performance
     function newFunction() {
         return newValue;
     }
     ```
   - This approach maintains history and allows for easy rollback if needed
   - Ensures no critical functionality is permanently lost
   - Makes code changes more traceable and reviewable

   7. Source Control Best Practices:
   - Always commit current changes before making modifications
   - This ensures a clean state and proper version control
   - Example workflow:
     ```bash
     # Commit current changes before modifications
     git add .
     git commit -m "feat: commit current state before changes"
     
     # After making changes
     git add .
     git commit -m "feat: implement new functionality"
     ```
   - Benefits of committing before changes:
     - Creates a clear restoration point
     - Makes changes easier to track
     - Simplifies rollback if needed
     - Maintains clean git history

   8. AI Response Guidelines:
   - Always provide code that matches the surrounding style and conventions
   - Follow project-specific patterns and naming conventions
   - When suggesting imports:
     - Only include if insertion point allows
     - Match existing import style (e.g., ES6 vs CommonJS)
     - Group imports according to project conventions
   - For code suggestions:
     - Match indentation style (spaces vs tabs)
     - Follow existing casing conventions (camelCase, PascalCase, etc.)
     - Maintain consistent comment style and formatting
     - Respect project's error handling patterns
   - When modifying existing code:
     - Preserve existing error handling
     - Maintain type safety where applicable
     - Keep consistent with existing patterns
     - Respect existing architectural decisions

   9. Documentation Rules:
   - Follow project's documentation style
   - Include JSDoc/TSDoc comments where appropriate
   - Maintain consistent comment formatting
   - Document any non-obvious code behavior
   - Example format:
     ```javascript
     /**
      * @description Brief description of function
      * @param {Type} paramName - Parameter description
      * @returns {Type} Description of return value
      */
     ```

   10. Project-Specific Conventions:
   - Use Markdown for all content files
   - Follow Zola's templating conventions
   - Maintain PWA compatibility in JavaScript changes
   - Respect existing SEO optimization patterns
   - Consider responsive design implications
   - Ensure dark/light mode compatibility
   - Ensure that you follow Zola's usage of Tera syntax, not generic Tera

    11. PWA Versioning:
    - When updating the code (especially JavaScript), increment the version number in `config.toml`
    - This ensures that users receive the latest version of the PWA
    - Example:
      ```toml
      pwa_VER = '4.0.6'
      ```

